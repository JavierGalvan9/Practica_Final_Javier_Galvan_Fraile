library(ggplot2)
library(data.table)
dataset <- read.table("breast-cancer-wisconsin.data", sep=",")
str(dataset)
summary(dataset)
head(dataset)
cat('Number of missing features: ', sum(dataset=='?'))
cat('Number of benign cases: ', sum(dataset$V11==2))
cat('Number of malignant cases: ', sum(dataset$V11==4))
class <- dataset$V11 #save classes column
class[class==2] = 1 #benign
class[class==4] = 0 #malignant
patient_id <- dataset$V1
dataset$V11 <- NULL #remove classes column
dataset$V1 <- NULL #remove id number column
dataset$V7 <- NULL #remove this column because it has missing data
#dataset$V7 <- as.numeric(as.character(dataset$V7)) #convert from factor to numeric variable "v7"
dataset.scaled <- scale(dataset)
summary(dataset.scaled)
dataset.pca <- prcomp(dataset.scaled)
summary(dataset.pca)
embedding <- data.table(dataset.pca$x[, 1:2])
embedding[, Patient_ID := patient_id]
embedding
g1 <- ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(size = 10, colour = "steelblue", alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
g1
library(dbscan)
library(caret) #package required for calculating the confussion matrix
dbs.classification = dbscan(dataset.scaled, eps=1.48, minPts=100)
confusionMatrix(factor(dbs.classification$cluster), factor(class))
embedding[, DClusters := dbs.classification$cluster]
embedding
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(DClusters)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
library(mclust)
expec.max <- Mclust(dataset.scaled, G = 2)
classifier <- expec.max$classification #get the predictions
classifier[classifier==2]=0 #set the right label for outliers
confusionMatrix(factor(classifier), factor(class))
embedding[, EMClusters := classifier]
embedding
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(EMClusters)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
expec.max2 <- Mclust(dataset.scaled, G = 6)
classifier2 <- expec.max2$classification #get the predictions
embedding[, EMClusters2 := classifier2]
embedding
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(EMClusters2)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
classifier2
classifier2[classifier2==2]=0 #set the right label for outliers
classifier2[classifier2!=0]=1
confusionMatrix(factor(classifier2), factor(class))
library(DMwR)
outlier.scores <- lofactor(dataset, k=5)
print(outlier.scores)
outlier.scores <- lofactor(dataset.scaled, k=5)
print(outlier.scores)
outlier.scores <- lofactor(dataset.scaled, k=5)
print(outlier.scores)
plot(density(outlier.scores))
outlier.scores <- lofactor(dataset, k=5)
plot(density(outlier.scores))
outlier.scores <- lofactor(dataset, k=1)
plot(density(outlier.scores))
outlier.scores
dataset
str(dataset)
lapply(dataset, as.numeric)
dataset <- lapply(dataset, as.numeric)
str(dataset)
dataset <- lapply(dataset, as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=1)
dataset <- lapply(dataset, as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=3)
dataset
head(dataset)
dataset <- read.table("breast-cancer-wisconsin.data", sep=",")
str(dataset)
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=3)
plot(density(outlier.scores))
dataset
dataset <- read.table("breast-cancer-wisconsin.data", sep=",")
str(dataset)
class <- dataset$V11 #save classes column
class[class==2] = 1 #benign
class[class==4] = 0 #malignant
patient_id <- dataset$V1
dataset$V11 <- NULL #remove classes column
dataset$V1 <- NULL #remove id number column
dataset$V7 <- NULL #remove this column because it has missing data
#dataset$V7 <- as.numeric(as.character(dataset$V7)) #convert from factor to numeric variable "v7"
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=3)
plot(density(outlier.scores))
dataset
outlier.scores
str(dataset)
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=10)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=100)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=50)
plot(density(outlier.scores))
library(rgl)
outliers <- order(outlier.scores, decreasing = T)[1:5]
outiers
outliers <- order(outlier.scores, decreasing = T)[1:5]
outliers
n <- nrow(dataset)
labels <- 1:n
labels[-outliers] <- "."
labels[outliers] <- "+"
biplot(dataset.pca, cex=.8, xlabels=labels)
neg = dataset[outliers,]
pos = dataset[-outliers,]
neg
pos
n <- nrow(dataset)
labels <- 1:n
labels
labels[-outliers] <- "."
labels[outliers] <- "+"
biplot(dataset.pca, cex=.8, xlabels=labels)
n <- nrow(dataset)
labels <- 1:n
labels
labels[-outliers] <- 1
labels[outliers] <- 0
embedding[, LOF := labels]
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(LOF)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
outliers <- order(outlier.scores, decreasing = T)[1:250]
neg = dataset[outliers,]
pos = dataset[-outliers,]
n <- nrow(dataset)
labels <- 1:n
labels
labels[-outliers] <- 1
labels[outliers] <- 0
embedding[, LOF := labels]
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(LOF)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
n <- nrow(dataset)
labels <- 1:n
labels[-outliers] <- 1
labels[outliers] <- 0
embedding[, LOF := labels]
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(LOF)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
confusionMatrix(factor(labels), factor(class))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=40)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=30)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=35)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=32)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=31)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=30)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=31)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing = T)[1:150]
n <- nrow(dataset)
labels <- 1:n
labels[-outliers] <- 1
labels[outliers] <- 0
embedding[, LOF := labels]
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(LOF)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
confusionMatrix(factor(labels), factor(class))
acc = sum(class[outliers]==0)/length(outliers)
acc
outliers <- order(outlier.scores, decreasing = F)[1:150]
n <- nrow(dataset)
labels <- 1:n
labels[-outliers] <- 1
labels[outliers] <- 0
embedding[, LOF := labels]
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(LOF)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
confusionMatrix(factor(labels), factor(class))
acc = sum(class[outliers]==0)/length(outliers)
acc
acc = sum(class[outliers]==1)/length(outliers)
acc
dataset.scaled[,] <- lapply(dataset.scaled[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset.scaled, k=31)
dataset.scaled
library(ggplot2)
library(data.table)
dataset <- read.table("breast-cancer-wisconsin.data", sep=",")
str(dataset)
summary(dataset)
head(dataset)
cat('Number of missing features: ', sum(dataset=='?'))
cat('Number of benign cases: ', sum(dataset$V11==2))
cat('Number of malignant cases: ', sum(dataset$V11==4))
class <- dataset$V11 #save classes column
class[class==2] = 1 #benign
class[class==4] = 0 #malignant
patient_id <- dataset$V1
dataset$V11 <- NULL #remove classes column
dataset$V1 <- NULL #remove id number column
dataset$V7 <- NULL #remove this column because it has missing data
#dataset$V7 <- as.numeric(as.character(dataset$V7)) #convert from factor to numeric variable "v7"
dataset.scaled <- scale(dataset)
summary(dataset.scaled)
dataset.pca <- prcomp(dataset.scaled)
summary(dataset.pca)
embedding <- data.table(dataset.pca$x[, 1:2])
embedding[, Patient_ID := patient_id]
embedding
g1 <- ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(size = 10, colour = "steelblue", alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
g1
library(dbscan)
library(caret) #package required for calculating the confussion matrix
dbs.classification = dbscan(dataset.scaled, eps=1.48, minPts=100)
confusionMatrix(factor(dbs.classification$cluster), factor(class))
embedding[, DClusters := dbs.classification$cluster]
embedding
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(DClusters)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
library(mclust)
expec.max <- Mclust(dataset.scaled, G = 2)
classifier <- expec.max$classification #get the predictions
classifier[classifier==2]=0 #set the right label for outliers
confusionMatrix(factor(classifier), factor(class))
embedding[, EMClusters := classifier]
embedding
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(EMClusters)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
expec.max2 <- Mclust(dataset.scaled, G = 6)
classifier2 <- expec.max2$classification #get the predictions
embedding[, EMClusters2 := classifier2]
embedding
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(EMClusters2)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
classifier2[classifier2==2]=0 #set the right label for negative predictions (malignant)
classifier2[classifier2!=0]=1 #set the right label for positive predictions (benign)
confusionMatrix(factor(classifier2), factor(class))
library(DMwR)
str(dataset.scaled)
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
str(dataset)
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=5)
print(outlier.scores)
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=31)
print(outlier.scores)
print(max(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=100)
print(max(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=100)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing = T)[1:5]
outliers
class[outliers]
outliers <- order(outlier.scores, decreasing = F)[1:5]
class[outliers]
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=50)
plot(density(outlier.scores))
outlier.scores
outliers <- order(outlier.scores, decreasing = F)[1:5]
outliers
class(outliers)
class[outliers]
outlier.scores[outliers]
max(outlier.scores)
min(outlier.scores)
outliers <- order(outlier.scores, decreasing = F)[1:5]
class[outliers]
sum(outlier.scores==0.942689)
sum(outlier.scores=='0.942689')
outliers <- order(outlier.scores, decreasing = F)[1:5]
class[outliers]
outlier.scores
sum(outlier.scores=='0.942689')
outliers <- order(outlier.scores, decreasing = F)[1:5]
class[outliers]
outlier.scores
sum(outlier.scores==0.9677513)
outliers <- order(outlier.scores, decreasing = T)[1:5]
class[outliers]
outlier.scores
sum(outlier.scores==0.9677513)
outliers <- order(outlier.scores, decreasing = T)[1:5]
class[outliers]
sum(outlier.scores==0.9677513)
sort(outlier.scores)
sort(outlier.scores)[0]
sort(outlier.scores)
outliers <- order(outlier.scores, decreasing = T)[1:5]
outlier.scores[outliers]
outliers <- order(outlier.scores, decreasing = T)[1:5]
outlier.scores[outliers]
class[outliers]
outliers <- order(outlier.scores, decreasing = F)[1:5]
outlier.scores[outliers]
class[outliers]
outliers <- order(outlier.scores, decreasing = F)[1:5]
outlier.scores[outliers]
class[outliers]
outliers <- order(outlier.scores, decreasing = T)[1:5]
outlier.scores[outliers]
class[outliers]
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=200)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing = T)[1:5]
outlier.scores[outliers]
class[outliers]
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=400)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing = T)[1:5]
outlier.scores[outliers]
class[outliers]
outliers <- order(outlier.scores, decreasing = T)[1:50]
class[outliers]
outliers <- order(outlier.scores, decreasing = T)[1:200]
class[outliers]
outliers <- order(outlier.scores, decreasing = T)[1:241]
class[outliers]
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=500)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=500)
plot(density(outlier.scores))
plot(density(outlier.scores))
outlier.scores[outliers]
class[outliers]
outliers <- order(outlier.scores, decreasing = T)[1:241]
class[outliers]
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=400)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing = T)[1:241]
class[outliers]
n <- nrow(dataset)
labels <- 1:n
labels[-outliers] <- 1
labels[outliers] <- 0
embedding[, LOF := labels]
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(LOF)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
confusionMatrix(factor(labels), factor(class))
library(ggplot2)
library(data.table)
dataset <- read.table("breast-cancer-wisconsin.data", sep=",")
str(dataset)
summary(dataset)
head(dataset)
cat('Number of missing features: ', sum(dataset=='?'))
cat('Number of benign cases: ', sum(dataset$V11==2))
cat('Number of malignant cases: ', sum(dataset$V11==4))
class <- dataset$V11 #save classes column
class[class==2] = 1 #benign
class[class==4] = 0 #malignant
patient_id <- dataset$V1
dataset$V11 <- NULL #remove classes column
dataset$V1 <- NULL #remove id number column
dataset$V7 <- NULL #remove this column because it has missing data
#dataset$V7 <- as.numeric(as.character(dataset$V7)) #convert from factor to numeric variable "v7"
dataset.scaled <- scale(dataset)
summary(dataset.scaled)
dataset.pca <- prcomp(dataset.scaled)
summary(dataset.pca)
embedding <- data.table(dataset.pca$x[, 1:2])
embedding[, Patient_ID := patient_id]
embedding
g1 <- ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(size = 10, colour = "steelblue", alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
g1
library(dbscan)
library(caret) #package required for calculating the confussion matrix
dbs.classification = dbscan(dataset.scaled, eps=1.48, minPts=100)
confusionMatrix(factor(dbs.classification$cluster), factor(class))
embedding[, DClusters := dbs.classification$cluster]
embedding
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(DClusters)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
library(mclust)
expec.max <- Mclust(dataset.scaled, G = 2)
classifier <- expec.max$classification #get the predictions
classifier[classifier==2]=0 #set the right label for outliers
confusionMatrix(factor(classifier), factor(class))
embedding[, EMClusters := classifier]
embedding
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(EMClusters)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
expec.max2 <- Mclust(dataset.scaled, G = 6)
classifier2 <- expec.max2$classification #get the predictions
embedding[, EMClusters2 := classifier2]
embedding
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(EMClusters2)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
classifier2[classifier2==2]=0 #set the right label for negative predictions (malignant)
classifier2[classifier2!=0]=1 #set the right label for positive predictions (benign)
confusionMatrix(factor(classifier2), factor(class))
library(DMwR)
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=200)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing = T)[1:241]
n <- nrow(dataset)
labels <- 1:n
labels[-outliers] <- 1
labels[outliers] <- 0
embedding[, LOF := labels]
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(LOF)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
confusionMatrix(factor(labels), factor(class))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=200)
plot(density(outlier.scores))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=400)
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=200)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing = T)[1:241]#we choose as outliers the 241 points with the largest LOF and expect that they correspond to the 241 malignant cases, assuming the rest of the points to be benign predictions
n <- nrow(dataset)
labels <- 1:n
labels[-outliers] <- 1
labels[outliers] <- 0
embedding[, LOF := labels]
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(LOF)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
confusionMatrix(factor(labels), factor(class))
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=400)
dataset[,] <- lapply(dataset[,], as.numeric) #first convert int variables to numeric to be able to make the following calculations
outlier.scores <- lofactor(dataset, k=400)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing = T)[1:241]#we choose as outliers the 241 points with the largest LOF and expect that they correspond to the 241 malignant cases, assuming the rest of the points to be benign predictions
n <- nrow(dataset)
labels <- 1:n
labels[-outliers] <- 1
labels[outliers] <- 0
embedding[, LOF := labels]
ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(LOF)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
confusionMatrix(factor(labels), factor(class))
g1 <- ggplot(embedding, aes(x = PC1, y = PC2)) +
geom_point(aes(colour = factor(class)), size = 10, alpha = 0.3) +
geom_text(aes(label = Patient_ID), check_overlap = TRUE) +
theme_minimal()
g1
